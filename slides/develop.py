#!/usr/bin/env python
# coding: utf-8

# In[37]:


from manim import *
from manim_pptx import *


# In[48]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -pql MotivatingIdea_ACC', 'class MotivatingIdea_ACC(PPTXScene):\n    def construct(self):\n        title = Title("Example: Adaptive Cruise Control")\n        self.add(title)\n        \n        car = ImageMobject("drawings/cars.png")\n        self.play(FadeIn(car))\n        self.endSlide()\n\n        car.generate_target()\n        car.target.scale(0.6)\n        car.target.shift(4*LEFT + UP)\n\n\n        dyn = MathTex(r"\\frac{d}{dt}\\begin{bmatrix}d\\\\ v\\end{bmatrix} &= \\begin{bmatrix}v_0 - v\\\\ -F(v)/m\\end{bmatrix} + \\begin{bmatrix}0\\\\g_0\\end{bmatrix}u, \\\\", \n          r"|u| &\\leq 0.25\\\\",\n          r"\\text{safe if } d &\\geq 1.8 v\\\\",\n          r"\\therefore ", r"h(x) &= d - 1.8 v"\n          )\n        dyn.set_color_by_tex("0.25", BLUE)\n        dyn.set_color_by_tex("h", RED)\n        dyn.shift(3*RIGHT)\n\n        cite = Tex(r"[Ames, 2019]", font_size=26)\n        cite.to_corner(DL)\n        cite.shift(0.35*DOWN)\n\n\n        self.play(MoveToTarget(car), FadeIn(dyn, cite))\n        self.endSlide()\n        \n        dyn2 =  MathTex(r"\\dot x &= f(x) + g(x) u\\\\", \n          r"|u| &\\leq 0.25\\\\",\n          r"h(x) &= d - 1.8 v", font_size=48\n          )\n        \n        dyn2.next_to(car, DOWN)\n        \n        self.play(TransformMatchingTex(dyn, dyn2))\n        self.remove(dyn, cite)\n        self.add(dyn2)\n        \n        s0 = ImageMobject("drawings/acc_sets_0.png")\n        sopt = ImageMobject("drawings/acc_sets_opt.png")\n        sfin = ImageMobject("drawings/acc_sets_opt_final.png")\n        sgap = ImageMobject("drawings/acc_sets_opt_final_gap.png")\n        for s in [s0, sopt, sfin, sgap]:\n            s.width = 6\n            s.shift(0.5*DOWN + 2*RIGHT)\n            \n        self.play(FadeIn(s0))\n        self.endSlide()\n        \n        self.play(ReplacementTransform(s0, sopt))\n        self.endSlide()\n        \n        self.play(ReplacementTransform(sopt, sfin))\n        self.play(ReplacementTransform(sfin, sgap))\n        \n        self.endSlide()\n        \n        self.play(FadeOut(car, dyn2), ReplacementTransform(sgap, s0.to_edge(LEFT)))\n        self.wait()\n        self.endSlide()\n\n    ')


# In[110]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -pql MotivatingIdea_Sets', '\nclass MotivatingIdea_Sets(PPTXScene):\n    def construct(self):\n        title = Title("Example: Adaptive Cruise Control")\n        title_new = Title("Motivating Idea")\n        self.add(title)\n\n        s0 = ImageMobject("drawings/acc_sets_opt.png")\n        s0.width = 6\n        s0.shift(0.5*DOWN + 2*RIGHT)\n        s0.to_edge(LEFT)\n        self.add(s0)\n        \n        self.play(ReplacementTransform(title, title_new))\n        self.endSlide()\n        \n        s2 = ImageMobject("drawings/sets_abstract_opt.png")\n        s2.width = 6\n        s2.shift(0.5*DOWN + 2 * RIGHT)\n        s2.to_edge(LEFT)\n        \n        \n        s1 = ImageMobject("drawings/sets_abstract.png")\n        s1.width = 6\n        s1.shift(0.5*DOWN + 2*RIGHT)\n        s1.to_edge(LEFT)\n        \n        \n        self.play(FadeOut(s0), FadeIn(s2))\n        self.play(FadeOut(s2), FadeIn(s1))\n        self.play(s1.animate.shift(LEFT))\n        self.endSlide()\n        \n        # choose a font size\n        fs = 36\n        \n        b = MathTex(r"\\text{Consider }b(x) &\\triangleq \\inf_{u \\in \\mathcal{U}} \\dot h(x, u) + \\alpha(h(x))\\\\",\n                    r"\\mathcal{C} &= \\{ x : b(x) \\geq 0 \\}",\n                   font_size=fs)\n        b.shift(1.5*UP + 2*RIGHT)\n\n        sC = ImageMobject("drawings/sets_abstract_C.png")\n        sC.width = 6\n        sC.shift(0.5*DOWN + 2*RIGHT)\n        sC.to_edge(LEFT).shift(LEFT)\n        \n        \n        self.play(FadeOut(s1), FadeIn(sC, b))\n        self.endSlide()\n        \n        sC1 = ImageMobject("drawings/sets_abstract_C_p1.png")\n        sC1.width = 6\n        sC1.shift(0.5*DOWN + 2*RIGHT)\n        sC1.to_edge(LEFT).shift(LEFT)\n        \n        usefulA1 = MathTex(r"\\text{Useful property 1: If }x \\in \\partial S, \\text{ and } \\nexists \\text{ safe } u\\\\", font_size=fs)\n        usefulA2 = MathTex(r"h(x) = 0 \\text{ and }  \\dot h(x, u) < 0 \\ \\forall u \\in \\mathcal{U}", font_size=fs)\n        usefulA3 = MathTex(r"h(x) = 0 \\text{ and } \\inf_{u \\in \\mathcal{U}} \\dot h(x, u) < 0", font_size=fs)\n        usefulA4 = MathTex(r"h(x) = 0 \\text{ and } \\inf_{u \\in \\mathcal{U}} \\dot h(x, u) + \\alpha(h(x))< 0", font_size=fs)\n        usefulA5 = MathTex(r"h(x) = 0 \\text{ and } b(x) < 0 ", font_size=fs)\n        usefulA6 = MathTex(r"\\therefore x \\notin \\mathcal{C}", font_size=fs)\n        \n        usefulA1.next_to(b, DOWN)\n        usefulA2.next_to(usefulA1, DOWN)\n        usefulA3.next_to(usefulA2, DOWN).align_to(usefulA2, LEFT)\n        usefulA4.next_to(usefulA3, DOWN).align_to(usefulA2, LEFT)\n        usefulA5.next_to(usefulA4, DOWN).align_to(usefulA2, LEFT)\n        usefulA6.next_to(usefulA5, DOWN).align_to(usefulA2, LEFT)\n        \n        self.play(FadeOut(sC), FadeIn(sC1, usefulA1))\n        self.endSlide()\n        \n        self.play(FadeIn(usefulA2))\n        self.endSlide()\n        \n        self.play(FadeIn(usefulA3))\n        self.endSlide()\n        \n        self.play(FadeIn(usefulA4))\n        self.endSlide()\n\n        self.play(FadeIn(usefulA5))\n        self.endSlide()\n        \n        \n        concA = Tex(r"$\\therefore$ unsafe $\\partial \\mathcal{S}$ not in  $\\mathcal{C}$", color=BLUE, font_size=48)\n        concA.next_to(usefulA6).shift(RIGHT)\n        \n        self.play(FadeIn(usefulA6, concA))\n        self.endSlide()\n        \n        self.play(FadeOut(usefulA1, usefulA2, usefulA3, usefulA4, usefulA5, usefulA6, concA))\n        \n        \n        sC2 = ImageMobject("drawings/sets_abstract_C_p2.png")\n        sC2.width = 6\n        sC2.shift(0.5*DOWN + 2*RIGHT)\n        sC2.to_edge(LEFT).shift(LEFT)\n        \n        usefulB1 = MathTex(r"\\text{Useful property 2: If }x \\in \\mathcal{C} \\text{ and } x \\in \\partial S,\\\\", font_size=fs)\n        usefulB2 = MathTex(r"b(x) \\geq 0, \\text{ and } h(x) = 0.\\\\", font_size=fs)\n        usefulB3 = MathTex(r"b(x) = \\inf_{u \\in \\mathcal{U}} \\dot h(x, u)", \n                          r" + \\alpha(h(x)) ", r"\\geq 0\\\\", font_size=fs)\n        usefulB4 = MathTex(r"\\therefore & \\forall u \\in \\mathcal{U}: \\dot h(x, u) \\geq 0", font_size=fs)\n        \n        usefulB1.next_to(b, DOWN)\n        usefulB2.next_to(usefulB1, DOWN)\n        usefulB3.next_to(usefulB2, DOWN).align_to(usefulB2, LEFT)\n        usefulB4.next_to(usefulB3, DOWN)\n\n        \n        self.play(FadeOut(sC1), FadeIn(sC2, usefulB1))\n        self.endSlide()\n        self.play(FadeIn(usefulB2))\n        self.endSlide()\n        self.play(FadeIn(usefulB3))\n        self.endSlide()\n        \n        cross = Cross(usefulB3[1], stroke_color=RED, stroke_width=3)\n        self.play(Create(cross))\n        self.endSlide()\n        \n        self.play(FadeIn(usefulB4))\n        self.endSlide()\n        \n        concB = Tex(r"If $u = \\pi(x)$ keeps $x \\in \\mathcal{C}$,\\\\", r"then $\\mathcal{S} \\cap \\mathcal{C}$ is forward invariant", color=BLUE, font_size=48)\n        concB.next_to(usefulB4, DOWN).shift(0.25*DOWN)\n        self.play(FadeIn(concB))\n        self.endSlide()\n        \n        \n\n')


# In[246]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -sql FormalConstruction', 'class FormalConstruction(PPTXScene):\n    def construct(self):\n        title=Title("Formal Construction (Main Result)")\n        self.play(FadeIn(title))\n        self.endSlide()\n        \n        \n        sets = ImageMobject("drawings/SandC_v2.png")\n        sets.height=3.5\n        sets.to_edge(LEFT).shift(0.75*UP)\n\n        \n        self.add(sets)\n        \n        Cs = MathTex(r"\\mathcal{S} &= \\{ x : h(x) \\geq 0 \\}\\\\",\n                     r"\\mathcal{C}_1 &= \\{ x : b_1(x) \\geq 0 \\}\\\\",\n                     r"& \\ \\ \\cdots\\\\", \n                     r" \\mathcal{C}_N &= \\{ x : b_N(x) \\geq 0 \\}\\\\",\n                     r"\\mathcal{C}^* &= \\mathcal{S} \\cap \\mathcal{C}_1 \\cdots \\cap \\mathcal{C}_N",\n                     font_size=36)\n        \n        Cs.next_to(sets, DOWN)\n        boxC = SurroundingRectangle(Cs[4], color=ORANGE)\n        \n#         self.add(Cs)\n        \n        bs = MathTex(r"b_0(x) &= h(x)\\\\",\n        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} \\dot b_0(x, u) + \\alpha_0 (b_0(x))\\\\",\n        r"&\\ \\ \\cdots\\\\",\n        r"b_N(x) &= \\inf_{u \\in \\mathcal{U}} \\dot b_{N-1}(x, u) + \\alpha_{N-1} (b_{N-1}(x))"\n        , font_size=36)\n        bs.to_edge(RIGHT).shift(0.5*LEFT)\n        bs.align_to(sets, UP)\n        \n        bsexplain = MathTex(r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} L_fb_0(x) + L_gb_0(x) u + \\alpha_0 (b_0(x))", font_size=36)\n        bsexplain.next_to(bs[1], DOWN).align_to(bs[1], LEFT)\n        \n        \n        self.play(FadeIn(bs[0], Cs[0]))\n        self.endSlide()\n        \n        self.play(FadeIn(bs[1], Cs[1]))\n        self.endSlide()\n        \n        self.play(FadeIn(bsexplain))\n        self.endSlide()\n        \n        self.play(FadeOut(bsexplain))\n        \n        self.play(FadeIn(bs[2], Cs[2]))\n        self.play(FadeIn(bs[3], Cs[3]))\n        self.endSlide()\n        \n        self.play(FadeIn(Cs[4], boxC))\n        self.endSlide()\n        \n        cond = MathTex(r"&\\text{If } \\exists \\alpha_N \\in \\mathcal{K} \\text{ s.t. }\\forall x \\in \\mathcal{C}^*,\\\\", \n                       r"&\\ \\sup_{u \\in \\mathcal{U}} \\dot b_N(x, u) + \\alpha_N(b_N(x)) \\geq 0\\\\",\n                       r"&\\text{then } b_N \\text{ is an ICCBF.}", font_size=48)\n        cond.next_to(bs, DOWN).shift(0.7*DOWN)\n        boxCond = SurroundingRectangle(cond, color=ORANGE, buff=MED_LARGE_BUFF*0.5)\n        condLab = Tex(r"Def:", font_size=36, color=ORANGE)\n        condLab.next_to(boxCond, UP).align_to(boxCond, LEFT).shift(0.15*DOWN)\n        \n        condGroup = VGroup(cond, boxCond, condLab)\n        \n        self.play(FadeIn(condGroup))\n        self.endSlide()\n        \n        self.play(FadeOut(bs, Cs, boxC), condGroup.animate.align_to(sets, UP).shift(0.0*DOWN))\n\n        thm = Tex(r"If $b_N$ is an ICCBF, any Lips. controller $\\pi$ s.t.\\\\", \n                 r"$\\pi(x) \\in \\{ u \\in \\mathcal{U} : \\dot b_N(x, u) + \\alpha_N(b_N(x)) \\geq 0 \\}$\\\\",\n                 r"renders $\\mathcal{C}^* \\subset \\mathcal{S}$ forward invariant.")\n        thm.to_edge(DOWN).shift(0.1*UP)\n        thmBox = SurroundingRectangle(thm, color=BLUE, buff=MED_LARGE_BUFF*0.5)\n        thmLab = Tex(r"Theorem:", font_size=36, color=BLUE)\n        thmLab.next_to(thmBox, UP).align_to(thmBox, LEFT).shift(0.15*DOWN)\n        self.add(thm, thmBox, thmLab)\n\n        ')


# In[ ]:





# In[ ]:





# In[109]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -sql FormalConstruction', 'class FormalConstruction(PPTXScene):\n    def construct(self):\n        title=Title("Formal Construction")\n        title2=Title("Formal Construction: ICCBFs")\n        self.add(title)\n        self.play(ReplacementTransform(title, title2))\n\n\n        bs = MathTex(r"b_0(x) &= h(x)\\\\",\n        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_0}}{{(x)}} + {{L_gb_0}}{{(x)}}{{u + }}{{\\alpha_0(b_0}}{{(x)}}{{)}}\\\\", \n        r"&\\vdots\\\\",\n        r"b_N(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_{N-1}}}{{(x)}}{{ + }}{{L_gb_{N-1}}}{{(x)}}{{ u + }}{{\\alpha_{N-1}(b_{N-1}}}{{(x)}}{{)}}"\n        , font_size=36)\n        bs.shift(2*LEFT)\n\n        bsNoX = MathTex(r"b_0(x) &= h(x)\\\\",\n        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_0}} + {{L_gb_0}}{{u + }}{{\\alpha_0(b_0}}{{)}}\\\\", \n        r"&\\vdots\\\\",\n        r"b_N(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_{N-1}}}{{ + }}{{L_gb_{N-1}}}{{ u + }}{{\\alpha_{N-1}(b_{N-1}}}{{)}}"\n        , font_size=36)\n        # bsNoX.shift(2*LEFT)\n        bsNoX.align_to(bs, LEFT)\n\n\n        cs = MathTex(r"\\mathcal{S} = \\mathcal{C}_0 &= \\{x : b_0(x) \\geq 0\\}\\\\",\n        r"\\mathcal{C}_1 &= \\{x : b_1(x) \\geq 0\\}\\\\",\n        r"&\\vdots\\\\",\n        r"\\mathcal{C}_N &= \\{x : b_N(x) \\geq 0\\}\\\\",\n        r"\\mathcal{C}^* &= \\mathcal{C}_0 \\cap \\mathcal{C}_1 \\cap \\cdots \\cap \\mathcal{C}_N"\n        , font_size=36\n        )\n        cs.set_color_by_tex("\\mathcal{C}^*", BLUE)\n        cs.next_to(bsNoX, 0.5*RIGHT)\n        cs.align_to(bs, UP)\n\n        self.play(FadeIn(bs))\n        self.endSlide()\n\n        self.play(TransformMatchingTex(bs, bsNoX))\n        self.remove(bs)\n        self.add(bsNoX)\n        self.endSlide()\n\n        self.play(FadeIn(cs))\n        self.endSlide()\n\n        self.play(bsNoX.animate.shift(1.1*UP), cs.animate.shift(1.1*UP))\n        self.endSlide()\n\n        defLabel = Tex(r"\\textbf{Defn:}", font_size=36)\n        defLabel.shift(0.9*DOWN)\n        definition =VGroup()\n        d1 = Tex(r"If ",r"$\\exists \\alpha_N \\in \\mathcal{K}$ s.t. ", r"$\\sup_{u\\in \\mathcal{U}} L_fb_N + L_gb_N u + \\alpha_N(b_N) \\geq 0 \\ \\forall x \\in \\mathcal{C}^*$, \\\\", font_size=36)\n        # d1.set_color_by_tex("If", BLUE)\n        definition += d1\n\n        d2 = Tex(r"then $b_N$ is an \\textbf{Input Constrained CBF}", font_size=36)\n        # d2.set_color_by_tex("b_N", BLUE)\n        definition += d2\n\n        definition.arrange(DOWN, center=False, aligned_edge=LEFT)\n\n        defLabel.to_edge(LEFT)\n\n        definition.next_to(defLabel, RIGHT)\n        definition.align_to(defLabel, UP)\n\n\n        theoremLabel = Tex(r"\\textbf{Thm:}", font_size=36)\n\n        theorem = VGroup()\n        t1 = Tex(r"If $b_N$ is an ICCBF, then", r" any Lips. cont. controller where", font_size=36)\n        t1.set_color_by_tex("If", ORANGE)\n        theorem += t1\n\n        theorem += Tex(r"$\\pi(x) \\in K_{ICCBF}(x) = \\{ u \\in \\mathcal{U} : L_fb_N + L_gb_N u + \\alpha_N(b_N) \\geq 0 \\}$,", font_size=36, color=BLUE)\n        t2 = Tex(r"will render $\\mathcal{C}^*$ forward invariant.", font_size=36)\n        t2.set_color_by_tex("forward", ORANGE)\n        theorem += t2\n        theorem.arrange(DOWN, center=False, aligned_edge=LEFT)\n\n        theorem.next_to(definition, DOWN)\n        theoremLabel.to_edge(LEFT)\n\n        theorem.align_to(definition,LEFT)\n        theoremLabel.align_to(theorem, UP)\n\n        self.play(FadeIn(defLabel), FadeIn(definition))\n        self.endSlide()\n\n\n        self.play(FadeIn(theoremLabel), FadeIn(theorem))\n        self.endSlide()\n')


# In[ ]:





# In[ ]:





# In[81]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -sql SimulationResultsACC_res1', 'class SimulationResultsACC_res1(PPTXScene):\n    def construct(self):\n        title = Title("Simulation Results: Adaptive Cruise Control")\n        self.add(title)\n\n        cbf_standard = ImageMobject("drawings/acc_results_1.png")\n        cbf_standard.width = 15\n        cbf_standard.shift(DOWN)\n        \n        desc = Tex(r"Applying clipped CLF-CBF-QP controller is not safe\\\\since $h(x)$ is not a valid CBF, with input constraints", color=BLUE)\n        desc.shift(2.5*DOWN)\n        \n        self.play(FadeIn(cbf_standard))\n        self.play(FadeIn(desc))\n        self.endSlide()')


# In[74]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -sql SimulationResultsACC_res2', 'class SimulationResultsACC_res2(PPTXScene):\n    def construct(self):\n        title = Title("Simulation Results: Adaptive Cruise Control")\n        self.add(title)\n        \n        s1 = ImageMobject("drawings/acc_sets_1.png")\n        s2 = ImageMobject("drawings/acc_sets_2.png")\n        s3 = ImageMobject("drawings/acc_sets_3.png")\n        s4 = ImageMobject("drawings/acc_sets_4.png")\n        for s in [s1,s2,s3,s4]:\n            s.width = 6\n            s.shift(0.5*DOWN + 3*LEFT)\n            \n        self.add(s1)\n        \n        cond1 = MathTex(r"h(x) &= x_1 - 1.8 x_2\\\\")\n        \n        cond1.next_to(s1, RIGHT)\n        self.add(cond1)\n        self.endSlide()\n                \n        cond2 = MathTex(r"h(x) &= x_1 - 1.8 x_2\\\\", \n                        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} \\dot h + ",r"\\alpha_0(h(x))\\\\",\n                        r"&{}\\quad\\quad \\quad (\\alpha_0(r) = 4 r)")\n        cond2.set_color_by_tex(r"4", BLUE)\n        cond2.next_to(s2, RIGHT)\n        self.play(TransformMatchingTex(cond1, cond2))\n        self.remove(cond1)\n        self.add(cond2)\n        self.endSlide()\n        \n        self.play(FadeOut(s1), FadeIn(s2))\n        self.endSlide()\n        \n        \n        cond3 = MathTex(r"h(x) &= x_1 - 1.8 x_2\\\\", \n                        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} \\dot h + ", r"4h(x)\\\\",\n                        r"b_2(x) &= \\inf_{u \\in \\mathcal{U}} \\dot b_1 + ", r"\\alpha_1(b_1(x))\\\\",\n                        r"&{}\\quad\\quad \\quad (\\alpha_1(r) = 7 \\sqrt{r}")\n        cond3.set_color_by_tex(r"7", BLUE)\n        cond3.next_to(s3, RIGHT)\n        self.play(TransformMatchingTex(cond2, cond3))\n        self.remove(cond2)\n        self.add(cond3)\n        self.endSlide()\n        \n        self.play(FadeOut(s2), FadeIn(s3))\n        self.endSlide()\n        \n        \n        cond4 = MathTex(r"h(x) &= x_1 - 1.8 x_2\\\\", \n                        r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} \\dot h + ", r"4h(x)\\\\",\n                        r"b_2(x) &= \\inf_{u \\in \\mathcal{U}} \\dot b_1 + ", r"7\\sqrt{b_1(x)}\\\\",\n                        r"\\mathcal{C}^* &= \\mathcal{S} \\cap \\mathcal{C}_1 \\cap \\mathcal{C}_2")\n        cond4.set_color_by_tex(r"\\mathcal{C}", BLUE)\n        cond4.next_to(s4, RIGHT).shift(0.5*UP)\n        self.play(TransformMatchingTex(cond3, cond4))\n        self.remove(cond3)\n        self.add(cond4)\n        self.endSlide()\n        \n        self.play(FadeOut(s3), FadeIn(s4))\n        self.endSlide()\n        \n        controller = MathTex(r"\\text{Safe } u &: \\dot b_2 + \\alpha_2(b_2(x)) \\geq 0\\\\&\\quad \\quad (\\alpha_2(r) = 2 r)")\n        controller.next_to(cond4, DOWN)\n#         controller.set_color(RED)\n        self.play(FadeIn(controller))\n        self.endSlide()\n        \n\n        ')


# In[83]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -pql SimulationResultsACC_res3', 'class SimulationResultsACC_res3(PPTXScene):\n    def construct(self):\n        title = Title("Simulation Results: Adaptive Cruise Control")\n        self.add(title)\n        \n        cbf1 = ImageMobject("drawings/acc_results_1.png")\n        cbf1.width = 15\n        cbf1.shift(DOWN)\n        self.add(cbf1)\n        \n        cbf2 = ImageMobject("drawings/acc_results_2.png")\n        cbf2.width = 15\n        cbf2.shift(DOWN)\n        \n        self.play(ReplacementTransform(cbf1, cbf2))\n        self.endSlide()\n        \n        \n        desc = Tex(r"Using the ICCBF, the controller starts\\\\ braking earlier to maintain safety", color=BLUE)\n        desc.shift(2.5*DOWN)\n        \n        self.play(FadeIn(desc))\n        self.endSlide()')


# In[117]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -pql SimulationResultsISS_1', 'class SimulationResultsISS_1(PPTXScene):\n    def construct(self):\n        title = Title("Simulation Results: Docking")\n        self.add(title)\n        \n        setup = ImageMobject("drawings/iss_setup.png")\n        setup.width = 15\n        self.add(setup)\n        self.endSlide()\n        \n        setup.generate_target()\n        setup.target.scale(0.5).shift(UP)\n        \n        self.play(MoveToTarget(setup))\n        self.endSlide()\n        \n        dyn = MathTex(\n            r"\\frac{d}{dt} \\begin{bmatrix} p_x\\\\ p_y \\\\  v_x \\\\ v_y \\\\ \\psi \\end{bmatrix} = \\begin{bmatrix}v_x \\\\v_y \\\\n^2 p_x + 2 n v_y + \\frac{\\mu}{r^2} - \\frac{\\mu(r+p_x)}{r_c^3}\\\\n^2 p_y - 2 n v_x - \\frac{\\mu p_y} {r_c^3}\\\\\\omega\\end{bmatrix} + \\frac{1}{m_c}\\begin{bmatrix}0 \\\\ 0 \\\\ u_x \\\\ u_y \\\\ 0\\end{bmatrix}",\n            font_size=30)\n        dyn.next_to(setup.target,DOWN).shift(3*LEFT)\n        \n        cons = MathTex(r"|u_x| + |u_y| \\leq 0.25\\text{ kN}")\n        cons.next_to(dyn, RIGHT).align_to(dyn, UP).shift(RIGHT).shift(0.5*DOWN)\n        \n        safety = MathTex(r"h(x) = \\cos \\theta - \\cos 10^\\circ")\n        safety.next_to(cons, DOWN)\n        \n        self.play(FadeIn(dyn, cons, safety))\n        self.endSlide()\n        ')


# In[125]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -pql SimulationResultsISS_1', 'class SimulationResultsISS_1(PPTXScene):\n    def construct(self):\n        title = Title("Simulation Results: Docking")\n        self.add(title)\n        \n        setup = ImageMobject("drawings/iss_setup.png")\n        setup.width = 15\n        self.add(setup)\n        self.endSlide()\n        \n        setup.generate_target()\n        setup.target.scale(0.7).to_edge(DOWN).to_edge(LEFT).shift(DOWN + LEFT)\n        \n        self.play(MoveToTarget(setup))\n        self.endSlide()\n        \n        dyn = MathTex(\n            r"\\frac{d}{dt} \\begin{bmatrix} p_x\\\\ p_y \\\\  v_x \\\\ v_y \\\\ \\psi \\end{bmatrix} = \\begin{bmatrix}v_x \\\\v_y \\\\n^2 p_x + 2 n v_y + \\frac{\\mu}{r^2} - \\frac{\\mu(r+p_x)}{r_c^3}\\\\n^2 p_y - 2 n v_x - \\frac{\\mu p_y} {r_c^3}\\\\\\omega\\end{bmatrix} + \\frac{1}{m_c}\\begin{bmatrix}0 \\\\ 0 \\\\ u_x \\\\ u_y \\\\ 0\\end{bmatrix}",\n            font_size=36)\n        dyn.shift(1.35*UP)\n        \n        cons = MathTex(r"|u_x| + |u_y| \\leq 0.25\\text{ kN}")\n        cons.next_to(setup.target, RIGHT).shift(LEFT)\n        \n        safety = MathTex(r"h(x) = \\cos \\theta - \\cos 10^\\circ")\n        safety.next_to(cons, DOWN)\n        \n        self.play(FadeIn(dyn, cons, safety))\n        self.endSlide()\n        ')


# In[141]:


get_ipython().run_cell_magic('manim', '-v WARNING  --progress_bar None -sql OutlineSlide_Conclusion', 'class OutlineSlide_Conclusion(PPTXScene):\n    def construct(self):\n\n        title_short = Title(r"Input Constrained Control Barrier Functions")\n        title_new = Title(r"Background and Problem Statement")\n\n        blist = BulletedList(\n            "Background and Problem Statement",\n             "Motivating Idea",\n              "Formal Construction",\n               "Simulation Results")\n\n        self.add(title_short, blist)\n        self.endSlide()\n        \n        bsNoX = MathTex(r"b_0(x) &= h(x)\\\\",\n            r"b_1(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_0}} + {{L_gb_0}}{{u + }}{{\\alpha_0(b_0}}{{)}}\\\\", \n            r"&\\vdots\\\\",\n            r"b_N(x) &= \\inf_{u \\in \\mathcal{U}} {{L_fb_{N-1}}}{{ + }}{{L_gb_{N-1}}}{{ u + }}{{\\alpha_{N-1}(b_{N-1}}}{{)}}"\n            , font_size=36)\n        bsNoX.shift(1*UP + 2.5*LEFT)    \n        self.play(FadeOut(blist), FadeIn(bsNoX))\n        self.endSlide()\n        \n        \n        diag = ImageMobject("drawings/conclusion.png")\n        diag.width = 8\n        diag.to_edge(DOWN).shift(2*RIGHT)\n        self.add(diag)\n        self.endSlide()\n        \n        \n        ')


# In[ ]:




